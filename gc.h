
#define STACK_MAX 256

typedef enum
{
	OBJ_INT,
	OBJ_PAIR
} ObjectType;


typedef struct sObject
{
	ObjectType type;
	unsigned char marked;
	struct sObject *next;
	union
	{
		int value;

		struct 
		{
			struct sObject *head;
			struct sObject *tail;
		};
	};
} Object;

typedef struct 
{
	Object *stack[STACK_MAX];
	Object *firstObject;
	int stackSize;
	int numObjects;
	int maxObjects;
} VM;

/************************************************************************/
/* 创建一个VM                                                                     */
/************************************************************************/
VM *newVM();

/************************************************************************/
/* 将对象压入栈中                                                                     */
/************************************************************************/
void push(VM *vm, Object *value);

/************************************************************************/
/* 对象出栈                                                                     */
/************************************************************************/
Object *pop(VM *vm);

/************************************************************************/
/* 创建一个Object                                                                     */
/************************************************************************/
Object *newObject(VM *vm, ObjectType type);

/************************************************************************/
/* 将int类型数据压入栈中                                                                     */
/************************************************************************/
void pushInt(VM *vm, int intValue);

/************************************************************************/
/* 将Pair数据类型压入栈中                                                                     */
/************************************************************************/
Object *pushPair(VM *vm);

/************************************************************************/
/* 标记所有可访问的对象                                                                     */
/************************************************************************/
void markAll(VM *vm);

/************************************************************************/
/* 标记一个可访问的对象                                                                      */
/************************************************************************/
void mark(Object *obj);

/************************************************************************/
/* 清理不可访问的对象                                                                  */
/************************************************************************/
void sweep(VM *vm);

/************************************************************************/
/* 启动GC                                                                     */
/************************************************************************/
void gc(VM *vm);

/************************************************************************/
/* 释放VM对象的内存                                                                     */
/************************************************************************/
void freeVM(VM *vm);

void _assert(int condition, const char* message);